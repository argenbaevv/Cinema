{"ast":null,"code":"import _slicedToArray from \"/Users/argenbaev/Desktop/home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"cssVarPrefix\", \"breakpoints\", \"spacing\", \"components\", \"variants\", \"colorInversion\", \"shouldSkipGeneratingVar\"],\n  _excluded2 = [\"colorSchemes\"];\nimport { deepmerge } from '@mui/utils';\nimport { createBreakpoints, createSpacing, colorChannel, unstable_prepareCssVars as prepareCssVars, unstable_createGetCssVar as systemCreateGetCssVar, unstable_styleFunctionSx as styleFunctionSx } from '@mui/system';\nimport defaultSxConfig from './sxConfig';\nimport colors from '../colors';\nimport defaultShouldSkipGeneratingVar from './shouldSkipGeneratingVar';\nimport { generateUtilityClass } from '../className';\nimport { createSoftInversion, createSolidInversion, createVariant } from './variantUtils';\nexport var createGetCssVar = function createGetCssVar() {\n  var cssVarPrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'joy';\n  return systemCreateGetCssVar(cssVarPrefix);\n};\nexport default function extendTheme(themeOptions) {\n  var _scalesInput$focus$th, _scalesInput$focus, _scalesInput$focus$th2, _scalesInput$focus2, _scalesInput$colorSch, _scalesInput$colorSch2, _scalesInput$colorSch3, _scalesInput$colorSch4, _scalesInput$colorSch5, _scalesInput$colorSch6, _scalesInput$colorSch7, _scalesInput$colorSch8, _scalesInput$colorSch9, _scalesInput$colorSch10, _scalesInput$colorSch11, _scalesInput$colorSch12, _scalesInput$colorSch13, _scalesInput$colorSch14, _scalesInput$colorSch15, _scalesInput$colorSch16, _scalesInput$colorSch17, _scalesInput$colorSch18, _scalesInput$colorSch19, _scalesInput$colorSch20, _scalesInput$colorSch21, _scalesInput$colorSch22, _scalesInput$colorSch23, _scalesInput$colorSch24, _scalesInput$colorSch25, _scalesInput$colorSch26, _scalesInput$colorSch27, _scalesInput$colorSch28, _scalesInput$colorSch29, _scalesInput$colorSch30, _scalesInput$colorSch31, _scalesInput$colorSch32, _scalesInput$colorSch33, _scalesInput$colorSch34, _scalesInput$colorSch35, _scalesInput$colorSch36, _scalesInput$colorSch37, _scalesInput$colorSch38, _scalesInput$colorSch39, _scalesInput$colorSch40, _scalesInput$colorSch41, _scalesInput$colorSch42, _scalesInput$colorSch43, _scalesInput$colorSch44, _scalesInput$colorSch45, _scalesInput$colorSch46, _scalesInput$colorSch47, _scalesInput$colorSch48, _scalesInput$colorSch49, _scalesInput$colorSch50, _scalesInput$colorSch51, _scalesInput$colorSch52, _scalesInput$colorSch53, _scalesInput$colorSch54, _scalesInput$colorSch55, _scalesInput$colorSch56, _scalesInput$colorSch57, _scalesInput$colorSch58, _scalesInput$colorSch59, _scalesInput$colorSch60, _scalesInput$colorSch61, _scalesInput$colorSch62, _scalesInput$colorSch63, _scalesInput$colorSch64, _scalesInput$colorSch65, _scalesInput$colorSch66, _scalesInput$colorSch67, _scalesInput$colorSch68, _scalesInput$colorSch69, _scalesInput$colorSch70, _scalesInput$colorSch71, _scalesInput$colorSch72, _scalesInput$colorSch73, _scalesInput$colorSch74, _scalesInput$colorSch75, _scalesInput$colorSch76, _scalesInput$colorSch77, _scalesInput$colorSch78;\n  var _ref = themeOptions || {},\n    _ref$cssVarPrefix = _ref.cssVarPrefix,\n    cssVarPrefix = _ref$cssVarPrefix === void 0 ? 'joy' : _ref$cssVarPrefix,\n    breakpoints = _ref.breakpoints,\n    spacing = _ref.spacing,\n    componentsInput = _ref.components,\n    variantsInput = _ref.variants,\n    colorInversionInput = _ref.colorInversion,\n    _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n    shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? defaultShouldSkipGeneratingVar : _ref$shouldSkipGenera,\n    scalesInput = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var getCssVar = createGetCssVar(cssVarPrefix);\n  var defaultColors = {\n    primary: colors.blue,\n    neutral: colors.grey,\n    danger: colors.red,\n    info: colors.purple,\n    success: colors.green,\n    warning: colors.yellow,\n    common: {\n      white: '#FFF',\n      black: '#09090D'\n    }\n  };\n  var getCssVarColor = function getCssVarColor(cssVar) {\n    var _defaultColors$color;\n    var tokens = cssVar.split('-');\n    var color = tokens[1];\n    var index = tokens[2];\n\n    // @ts-ignore\n    return getCssVar(cssVar, (_defaultColors$color = defaultColors[color]) == null ? void 0 : _defaultColors$color[index]);\n  };\n  var createLightModeVariantVariables = function createLightModeVariantVariables(color) {\n    return {\n      plainColor: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      plainHoverBg: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      plainActiveBg: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      plainDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      outlinedColor: getCssVarColor(\"palette-\".concat(color, \"-500\")),\n      outlinedBorder: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      outlinedHoverBg: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      outlinedHoverBorder: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      outlinedActiveBg: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      outlinedDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      outlinedDisabledBorder: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      softColor: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      softBg: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      softHoverBg: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      softActiveBg: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      softDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      softDisabledBg: getCssVarColor(\"palette-\".concat(color, \"-50\")),\n      solidColor: '#fff',\n      solidBg: getCssVarColor(\"palette-\".concat(color, \"-500\")),\n      solidHoverBg: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      solidActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      solidDisabledColor: \"#fff\",\n      solidDisabledBg: getCssVarColor(\"palette-\".concat(color, \"-200\"))\n    };\n  };\n  var createDarkModeVariantVariables = function createDarkModeVariantVariables(color) {\n    return {\n      plainColor: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      plainHoverBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      plainActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      plainDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      outlinedColor: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      outlinedBorder: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      outlinedHoverBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      outlinedHoverBorder: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      outlinedActiveBg: getCssVarColor(\"palette-\".concat(color, \"-900\")),\n      outlinedDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      outlinedDisabledBorder: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      softColor: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      softBg: getCssVarColor(\"palette-\".concat(color, \"-900\")),\n      softHoverBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      softActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      softDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      softDisabledBg: getCssVarColor(\"palette-\".concat(color, \"-900\")),\n      solidColor: \"#fff\",\n      solidBg: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      solidHoverBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      solidActiveBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      solidDisabledColor: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      solidDisabledBg: getCssVarColor(\"palette-\".concat(color, \"-900\"))\n    };\n  };\n  var lightColorSystem = {\n    palette: {\n      mode: 'light',\n      primary: _extends({}, defaultColors.primary, createLightModeVariantVariables('primary')),\n      neutral: _extends({}, defaultColors.neutral, {\n        plainColor: getCssVarColor(\"palette-neutral-800\"),\n        plainHoverColor: getCssVarColor(\"palette-neutral-900\"),\n        plainHoverBg: getCssVarColor(\"palette-neutral-100\"),\n        plainActiveBg: getCssVarColor(\"palette-neutral-200\"),\n        plainDisabledColor: getCssVarColor(\"palette-neutral-300\"),\n        outlinedColor: getCssVarColor(\"palette-neutral-800\"),\n        outlinedBorder: getCssVarColor(\"palette-neutral-200\"),\n        outlinedHoverColor: getCssVarColor(\"palette-neutral-900\"),\n        outlinedHoverBg: getCssVarColor(\"palette-neutral-100\"),\n        outlinedHoverBorder: getCssVarColor(\"palette-neutral-300\"),\n        outlinedActiveBg: getCssVarColor(\"palette-neutral-200\"),\n        outlinedDisabledColor: getCssVarColor(\"palette-neutral-300\"),\n        outlinedDisabledBorder: getCssVarColor(\"palette-neutral-100\"),\n        softColor: getCssVarColor(\"palette-neutral-800\"),\n        softBg: getCssVarColor(\"palette-neutral-100\"),\n        softHoverColor: getCssVarColor(\"palette-neutral-900\"),\n        softHoverBg: getCssVarColor(\"palette-neutral-200\"),\n        softActiveBg: getCssVarColor(\"palette-neutral-300\"),\n        softDisabledColor: getCssVarColor(\"palette-neutral-300\"),\n        softDisabledBg: getCssVarColor(\"palette-neutral-50\"),\n        solidColor: getCssVarColor(\"palette-common-white\"),\n        solidBg: getCssVarColor(\"palette-neutral-600\"),\n        solidHoverBg: getCssVarColor(\"palette-neutral-700\"),\n        solidActiveBg: getCssVarColor(\"palette-neutral-800\"),\n        solidDisabledColor: getCssVarColor(\"palette-neutral-300\"),\n        solidDisabledBg: getCssVarColor(\"palette-neutral-50\")\n      }),\n      danger: _extends({}, defaultColors.danger, createLightModeVariantVariables('danger')),\n      info: _extends({}, defaultColors.info, createLightModeVariantVariables('info')),\n      success: _extends({}, defaultColors.success, createLightModeVariantVariables('success')),\n      warning: _extends({}, defaultColors.warning, createLightModeVariantVariables('warning'), {\n        solidColor: getCssVarColor(\"palette-warning-800\"),\n        solidBg: getCssVarColor(\"palette-warning-200\"),\n        solidHoverBg: getCssVarColor(\"palette-warning-300\"),\n        solidActiveBg: getCssVarColor(\"palette-warning-400\"),\n        solidDisabledColor: getCssVarColor(\"palette-warning-200\"),\n        solidDisabledBg: getCssVarColor(\"palette-warning-50\"),\n        softColor: getCssVarColor(\"palette-warning-800\"),\n        softBg: getCssVarColor(\"palette-warning-50\"),\n        softHoverBg: getCssVarColor(\"palette-warning-100\"),\n        softActiveBg: getCssVarColor(\"palette-warning-200\"),\n        softDisabledColor: getCssVarColor(\"palette-warning-200\"),\n        softDisabledBg: getCssVarColor(\"palette-warning-50\"),\n        outlinedColor: getCssVarColor(\"palette-warning-800\"),\n        outlinedHoverBg: getCssVarColor(\"palette-warning-50\"),\n        plainColor: getCssVarColor(\"palette-warning-800\"),\n        plainHoverBg: getCssVarColor(\"palette-warning-50\")\n      }),\n      common: {\n        white: '#FFF',\n        black: '#09090D'\n      },\n      text: {\n        primary: getCssVarColor('palette-neutral-800'),\n        secondary: getCssVarColor('palette-neutral-600'),\n        tertiary: getCssVarColor('palette-neutral-500')\n      },\n      background: {\n        body: getCssVarColor('palette-common-white'),\n        surface: getCssVarColor('palette-common-white'),\n        popup: getCssVarColor('palette-common-white'),\n        level1: getCssVarColor('palette-neutral-50'),\n        level2: getCssVarColor('palette-neutral-100'),\n        level3: getCssVarColor('palette-neutral-200'),\n        tooltip: getCssVarColor('palette-neutral-800'),\n        backdrop: 'rgba(255 255 255 / 0.5)'\n      },\n      divider: \"rgba(\".concat(getCssVar('palette-neutral-mainChannel', colorChannel(defaultColors.neutral[500]) // should be the same index as in `attachColorChannels`\n      ), \" / 0.28)\"),\n      focusVisible: getCssVarColor('palette-primary-500')\n    },\n    shadowRing: '0 0 #000',\n    shadowChannel: '187 187 187'\n  };\n  var darkColorSystem = {\n    palette: {\n      mode: 'dark',\n      primary: _extends({}, defaultColors.primary, createDarkModeVariantVariables('primary')),\n      neutral: _extends({}, defaultColors.neutral, {\n        plainColor: getCssVarColor(\"palette-neutral-200\"),\n        plainHoverColor: getCssVarColor(\"palette-neutral-50\"),\n        plainHoverBg: getCssVarColor(\"palette-neutral-800\"),\n        plainActiveBg: getCssVarColor(\"palette-neutral-700\"),\n        plainDisabledColor: getCssVarColor(\"palette-neutral-700\"),\n        outlinedColor: getCssVarColor(\"palette-neutral-200\"),\n        outlinedBorder: getCssVarColor(\"palette-neutral-800\"),\n        outlinedHoverColor: getCssVarColor(\"palette-neutral-50\"),\n        outlinedHoverBg: getCssVarColor(\"palette-neutral-800\"),\n        outlinedHoverBorder: getCssVarColor(\"palette-neutral-700\"),\n        outlinedActiveBg: getCssVarColor(\"palette-neutral-800\"),\n        outlinedDisabledColor: getCssVarColor(\"palette-neutral-800\"),\n        outlinedDisabledBorder: getCssVarColor(\"palette-neutral-800\"),\n        softColor: getCssVarColor(\"palette-neutral-200\"),\n        softBg: getCssVarColor(\"palette-neutral-800\"),\n        softHoverColor: getCssVarColor(\"palette-neutral-50\"),\n        softHoverBg: getCssVarColor(\"palette-neutral-700\"),\n        softActiveBg: getCssVarColor(\"palette-neutral-600\"),\n        softDisabledColor: getCssVarColor(\"palette-neutral-700\"),\n        softDisabledBg: getCssVarColor(\"palette-neutral-900\"),\n        solidColor: getCssVarColor(\"palette-common-white\"),\n        solidBg: getCssVarColor(\"palette-neutral-600\"),\n        solidHoverBg: getCssVarColor(\"palette-neutral-700\"),\n        solidActiveBg: getCssVarColor(\"palette-neutral-800\"),\n        solidDisabledColor: getCssVarColor(\"palette-neutral-700\"),\n        solidDisabledBg: getCssVarColor(\"palette-neutral-900\")\n      }),\n      danger: _extends({}, defaultColors.danger, createDarkModeVariantVariables('danger')),\n      info: _extends({}, defaultColors.info, createDarkModeVariantVariables('info')),\n      success: _extends({}, defaultColors.success, createDarkModeVariantVariables('success'), {\n        solidColor: '#fff',\n        solidBg: getCssVarColor(\"palette-success-600\"),\n        solidHoverBg: getCssVarColor(\"palette-success-700\"),\n        solidActiveBg: getCssVarColor(\"palette-success-800\")\n      }),\n      warning: _extends({}, defaultColors.warning, createDarkModeVariantVariables('warning'), {\n        solidColor: getCssVarColor(\"palette-common-black\"),\n        solidBg: getCssVarColor(\"palette-warning-300\"),\n        solidHoverBg: getCssVarColor(\"palette-warning-400\"),\n        solidActiveBg: getCssVarColor(\"palette-warning-500\")\n      }),\n      common: {\n        white: '#FFF',\n        black: '#09090D'\n      },\n      text: {\n        primary: getCssVarColor('palette-neutral-100'),\n        secondary: getCssVarColor('palette-neutral-300'),\n        tertiary: getCssVarColor('palette-neutral-400')\n      },\n      background: {\n        body: getCssVarColor('palette-neutral-900'),\n        surface: getCssVarColor('palette-common-black'),\n        popup: getCssVarColor('palette-neutral-800'),\n        level1: getCssVarColor('palette-neutral-800'),\n        level2: getCssVarColor('palette-neutral-700'),\n        level3: getCssVarColor('palette-neutral-600'),\n        tooltip: getCssVarColor('palette-neutral-600'),\n        backdrop: \"rgba(\".concat(getCssVar('palette-neutral-darkChannel', colorChannel(defaultColors.neutral[800]) // should be the same index as in `attachColorChannels`\n        ), \" / 0.5)\")\n      },\n      divider: \"rgba(\".concat(getCssVar('palette-neutral-mainChannel', colorChannel(defaultColors.neutral[500]) // should be the same index as in `attachColorChannels`\n      ), \" / 0.24)\"),\n      focusVisible: getCssVarColor('palette-primary-500')\n    },\n    shadowRing: '0 0 #000',\n    shadowChannel: '0 0 0'\n  };\n  var fontFamilyFallback = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"';\n  var fontFamily = _extends({\n    body: \"\\\"Public Sans\\\", \".concat(getCssVar('fontFamily-fallback', fontFamilyFallback)),\n    display: \"\\\"Public Sans\\\", \".concat(getCssVar('fontFamily-fallback', fontFamilyFallback)),\n    code: 'Source Code Pro,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace',\n    fallback: fontFamilyFallback\n  }, scalesInput.fontFamily);\n  var fontWeight = _extends({\n    xs: 200,\n    sm: 300,\n    md: 500,\n    lg: 600,\n    xl: 700,\n    xl2: 800,\n    xl3: 900\n  }, scalesInput.fontWeight);\n  var fontSize = _extends({\n    xs3: '0.5rem',\n    xs2: '0.625rem',\n    xs: '0.75rem',\n    sm: '0.875rem',\n    md: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    xl2: '1.5rem',\n    xl3: '1.875rem',\n    xl4: '2.25rem',\n    xl5: '3rem',\n    xl6: '3.75rem',\n    xl7: '4.5rem'\n  }, scalesInput.fontSize);\n  var lineHeight = _extends({\n    sm: 1.25,\n    md: 1.5,\n    lg: 1.7\n  }, scalesInput.lineHeight);\n  var letterSpacing = _extends({\n    sm: '-0.01em',\n    md: '0.083em',\n    lg: '0.125em'\n  }, scalesInput.letterSpacing);\n  var defaultScales = {\n    colorSchemes: {\n      light: lightColorSystem,\n      dark: darkColorSystem\n    },\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    focus: {\n      thickness: '2px',\n      selector: \"&.\".concat(generateUtilityClass('', 'focusVisible'), \", &:focus-visible\"),\n      default: {\n        outlineOffset: \"var(--focus-outline-offset, \".concat(getCssVar('focus-thickness', (_scalesInput$focus$th = (_scalesInput$focus = scalesInput.focus) == null ? void 0 : _scalesInput$focus.thickness) != null ? _scalesInput$focus$th : '2px'), \")\"),\n        outline: \"\".concat(getCssVar('focus-thickness', (_scalesInput$focus$th2 = (_scalesInput$focus2 = scalesInput.focus) == null ? void 0 : _scalesInput$focus2.thickness) != null ? _scalesInput$focus$th2 : '2px'), \" solid \").concat(getCssVar('palette-focusVisible', defaultColors.primary[500]))\n      }\n    },\n    lineHeight: lineHeight,\n    letterSpacing: letterSpacing,\n    radius: {\n      xs: '4px',\n      sm: '8px',\n      md: '12px',\n      lg: '16px',\n      xl: '20px'\n    },\n    shadow: {\n      xs: \"\".concat(getCssVar('shadowRing', (_scalesInput$colorSch = (_scalesInput$colorSch2 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch3 = _scalesInput$colorSch2.light) == null ? void 0 : _scalesInput$colorSch3.shadowRing) != null ? _scalesInput$colorSch : lightColorSystem.shadowRing), \", 0 1px 2px 0 rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch4 = (_scalesInput$colorSch5 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch6 = _scalesInput$colorSch5.light) == null ? void 0 : _scalesInput$colorSch6.shadowChannel) != null ? _scalesInput$colorSch4 : lightColorSystem.shadowChannel), \" / 0.12)\"),\n      sm: \"\".concat(getCssVar('shadowRing', (_scalesInput$colorSch7 = (_scalesInput$colorSch8 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch9 = _scalesInput$colorSch8.light) == null ? void 0 : _scalesInput$colorSch9.shadowRing) != null ? _scalesInput$colorSch7 : lightColorSystem.shadowRing), \", 0.3px 0.8px 1.1px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch10 = (_scalesInput$colorSch11 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch12 = _scalesInput$colorSch11.light) == null ? void 0 : _scalesInput$colorSch12.shadowChannel) != null ? _scalesInput$colorSch10 : lightColorSystem.shadowChannel), \" / 0.11), 0.5px 1.3px 1.8px -0.6px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch13 = (_scalesInput$colorSch14 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch15 = _scalesInput$colorSch14.light) == null ? void 0 : _scalesInput$colorSch15.shadowChannel) != null ? _scalesInput$colorSch13 : lightColorSystem.shadowChannel), \" / 0.18), 1.1px 2.7px 3.8px -1.2px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch16 = (_scalesInput$colorSch17 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch18 = _scalesInput$colorSch17.light) == null ? void 0 : _scalesInput$colorSch18.shadowChannel) != null ? _scalesInput$colorSch16 : lightColorSystem.shadowChannel), \" / 0.26)\"),\n      md: \"\".concat(getCssVar('shadowRing', (_scalesInput$colorSch19 = (_scalesInput$colorSch20 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch21 = _scalesInput$colorSch20.light) == null ? void 0 : _scalesInput$colorSch21.shadowRing) != null ? _scalesInput$colorSch19 : lightColorSystem.shadowRing), \", 0.3px 0.8px 1.1px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch22 = (_scalesInput$colorSch23 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch24 = _scalesInput$colorSch23.light) == null ? void 0 : _scalesInput$colorSch24.shadowChannel) != null ? _scalesInput$colorSch22 : lightColorSystem.shadowChannel), \" / 0.12), 1.1px 2.8px 3.9px -0.4px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch25 = (_scalesInput$colorSch26 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch27 = _scalesInput$colorSch26.light) == null ? void 0 : _scalesInput$colorSch27.shadowChannel) != null ? _scalesInput$colorSch25 : lightColorSystem.shadowChannel), \" / 0.17), 2.4px 6.1px 8.6px -0.8px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch28 = (_scalesInput$colorSch29 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch30 = _scalesInput$colorSch29.light) == null ? void 0 : _scalesInput$colorSch30.shadowChannel) != null ? _scalesInput$colorSch28 : lightColorSystem.shadowChannel), \" / 0.23), 5.3px 13.3px 18.8px -1.2px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch31 = (_scalesInput$colorSch32 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch33 = _scalesInput$colorSch32.light) == null ? void 0 : _scalesInput$colorSch33.shadowChannel) != null ? _scalesInput$colorSch31 : lightColorSystem.shadowChannel), \" / 0.29)\"),\n      lg: \"\".concat(getCssVar('shadowRing', (_scalesInput$colorSch34 = (_scalesInput$colorSch35 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch36 = _scalesInput$colorSch35.light) == null ? void 0 : _scalesInput$colorSch36.shadowRing) != null ? _scalesInput$colorSch34 : lightColorSystem.shadowRing), \", 0.3px 0.8px 1.1px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch37 = (_scalesInput$colorSch38 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch39 = _scalesInput$colorSch38.light) == null ? void 0 : _scalesInput$colorSch39.shadowChannel) != null ? _scalesInput$colorSch37 : lightColorSystem.shadowChannel), \" / 0.11), 1.8px 4.5px 6.4px -0.2px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch40 = (_scalesInput$colorSch41 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch42 = _scalesInput$colorSch41.light) == null ? void 0 : _scalesInput$colorSch42.shadowChannel) != null ? _scalesInput$colorSch40 : lightColorSystem.shadowChannel), \" / 0.13), 3.2px 7.9px 11.2px -0.4px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch43 = (_scalesInput$colorSch44 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch45 = _scalesInput$colorSch44.light) == null ? void 0 : _scalesInput$colorSch45.shadowChannel) != null ? _scalesInput$colorSch43 : lightColorSystem.shadowChannel), \" / 0.16), 4.8px 12px 17px -0.5px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch46 = (_scalesInput$colorSch47 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch48 = _scalesInput$colorSch47.light) == null ? void 0 : _scalesInput$colorSch48.shadowChannel) != null ? _scalesInput$colorSch46 : lightColorSystem.shadowChannel), \" / 0.19), 7px 17.5px 24.7px -0.7px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch49 = (_scalesInput$colorSch50 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch51 = _scalesInput$colorSch50.light) == null ? void 0 : _scalesInput$colorSch51.shadowChannel) != null ? _scalesInput$colorSch49 : lightColorSystem.shadowChannel), \" / 0.21)\"),\n      xl: \"\".concat(getCssVar('shadowRing', (_scalesInput$colorSch52 = (_scalesInput$colorSch53 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch54 = _scalesInput$colorSch53.light) == null ? void 0 : _scalesInput$colorSch54.shadowRing) != null ? _scalesInput$colorSch52 : lightColorSystem.shadowRing), \", 0.3px 0.8px 1.1px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch55 = (_scalesInput$colorSch56 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch57 = _scalesInput$colorSch56.light) == null ? void 0 : _scalesInput$colorSch57.shadowChannel) != null ? _scalesInput$colorSch55 : lightColorSystem.shadowChannel), \" / 0.11), 1.8px 4.5px 6.4px -0.2px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch58 = (_scalesInput$colorSch59 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch60 = _scalesInput$colorSch59.light) == null ? void 0 : _scalesInput$colorSch60.shadowChannel) != null ? _scalesInput$colorSch58 : lightColorSystem.shadowChannel), \" / 0.13), 3.2px 7.9px 11.2px -0.4px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch61 = (_scalesInput$colorSch62 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch63 = _scalesInput$colorSch62.light) == null ? void 0 : _scalesInput$colorSch63.shadowChannel) != null ? _scalesInput$colorSch61 : lightColorSystem.shadowChannel), \" / 0.16), 4.8px 12px 17px -0.5px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch64 = (_scalesInput$colorSch65 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch66 = _scalesInput$colorSch65.light) == null ? void 0 : _scalesInput$colorSch66.shadowChannel) != null ? _scalesInput$colorSch64 : lightColorSystem.shadowChannel), \" / 0.19), 7px 17.5px 24.7px -0.7px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch67 = (_scalesInput$colorSch68 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch69 = _scalesInput$colorSch68.light) == null ? void 0 : _scalesInput$colorSch69.shadowChannel) != null ? _scalesInput$colorSch67 : lightColorSystem.shadowChannel), \" / 0.21), 10.2px 25.5px 36px -0.9px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch70 = (_scalesInput$colorSch71 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch72 = _scalesInput$colorSch71.light) == null ? void 0 : _scalesInput$colorSch72.shadowChannel) != null ? _scalesInput$colorSch70 : lightColorSystem.shadowChannel), \" / 0.24), 14.8px 36.8px 52.1px -1.1px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch73 = (_scalesInput$colorSch74 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch75 = _scalesInput$colorSch74.light) == null ? void 0 : _scalesInput$colorSch75.shadowChannel) != null ? _scalesInput$colorSch73 : lightColorSystem.shadowChannel), \" / 0.27), 21px 52.3px 74px -1.2px rgba(\").concat(getCssVar('shadowChannel', (_scalesInput$colorSch76 = (_scalesInput$colorSch77 = scalesInput.colorSchemes) == null ? void 0 : (_scalesInput$colorSch78 = _scalesInput$colorSch77.light) == null ? void 0 : _scalesInput$colorSch78.shadowChannel) != null ? _scalesInput$colorSch76 : lightColorSystem.shadowChannel), \" / 0.29)\")\n    },\n    zIndex: {\n      badge: 1,\n      table: 10,\n      popup: 1000,\n      modal: 1300,\n      tooltip: 1500\n    },\n    typography: {\n      display1: {\n        fontFamily: getCssVar('fontFamily-display', fontFamily.display),\n        fontWeight: getCssVar('fontWeight-xl', fontWeight.xl.toString()),\n        fontSize: getCssVar('fontSize-xl7', fontSize.xl7),\n        lineHeight: getCssVar('lineHeight-sm', lineHeight.sm.toString()),\n        letterSpacing: getCssVar('letterSpacing-sm', letterSpacing.sm),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      display2: {\n        fontFamily: getCssVar('fontFamily-display', fontFamily.display),\n        fontWeight: getCssVar('fontWeight-xl', fontWeight.xl.toString()),\n        fontSize: getCssVar('fontSize-xl6', fontSize.xl6),\n        lineHeight: getCssVar('lineHeight-sm', lineHeight.sm.toString()),\n        letterSpacing: getCssVar('letterSpacing-sm', letterSpacing.sm),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      h1: {\n        fontFamily: getCssVar('fontFamily-display', fontFamily.display),\n        fontWeight: getCssVar('fontWeight-lg', fontWeight.lg.toString()),\n        fontSize: getCssVar('fontSize-xl5', fontSize.xl5),\n        lineHeight: getCssVar('lineHeight-sm', lineHeight.sm.toString()),\n        letterSpacing: getCssVar('letterSpacing-sm', letterSpacing.sm),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      h2: {\n        fontFamily: getCssVar('fontFamily-display', fontFamily.display),\n        fontWeight: getCssVar('fontWeight-lg', fontWeight.lg.toString()),\n        fontSize: getCssVar('fontSize-xl4', fontSize.xl4),\n        lineHeight: getCssVar('lineHeight-sm', lineHeight.sm.toString()),\n        letterSpacing: getCssVar('letterSpacing-sm', letterSpacing.sm),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      h3: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontWeight: getCssVar('fontWeight-md', fontWeight.md.toString()),\n        fontSize: getCssVar('fontSize-xl3', fontSize.xl3),\n        lineHeight: getCssVar('lineHeight-sm', lineHeight.sm.toString()),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      h4: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontWeight: getCssVar('fontWeight-md', fontWeight.md.toString()),\n        fontSize: getCssVar('fontSize-xl2', fontSize.xl2),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      h5: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontWeight: getCssVar('fontWeight-md', fontWeight.md.toString()),\n        fontSize: getCssVar('fontSize-xl', fontSize.xl),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      h6: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontWeight: getCssVar('fontWeight-md', fontWeight.md.toString()),\n        fontSize: getCssVar('fontSize-lg', fontSize.lg),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      body1: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontSize: getCssVar('fontSize-md', fontSize.md),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-primary', lightColorSystem.palette.text.primary)\n      },\n      body2: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontSize: getCssVar('fontSize-sm', fontSize.sm),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-secondary', lightColorSystem.palette.text.secondary)\n      },\n      body3: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontSize: getCssVar('fontSize-xs', fontSize.xs),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-tertiary', lightColorSystem.palette.text.tertiary)\n      },\n      body4: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontSize: getCssVar('fontSize-xs2', fontSize.xs2),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-tertiary', lightColorSystem.palette.text.tertiary)\n      },\n      body5: {\n        fontFamily: getCssVar('fontFamily-body', fontFamily.body),\n        fontSize: getCssVar('fontSize-xs3', fontSize.xs3),\n        lineHeight: getCssVar('lineHeight-md', lineHeight.md.toString()),\n        color: getCssVar('palette-text-tertiary', lightColorSystem.palette.text.tertiary)\n      }\n    }\n  };\n  var _ref2 = scalesInput ? deepmerge(defaultScales, scalesInput) : defaultScales,\n    colorSchemes = _ref2.colorSchemes,\n    mergedScales = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n  var theme = _extends({\n    colorSchemes: colorSchemes\n  }, mergedScales, {\n    breakpoints: createBreakpoints(breakpoints != null ? breakpoints : {}),\n    components: deepmerge({\n      // TODO: find a way to abstract SvgIcon out of @mui/material\n      MuiSvgIcon: {\n        defaultProps: {\n          fontSize: 'xl'\n        },\n        styleOverrides: {\n          root: function root(_ref3) {\n            var ownerState = _ref3.ownerState,\n              themeProp = _ref3.theme;\n            var _themeProp$vars$palet;\n            var instanceFontSize = ownerState.instanceFontSize;\n            return _extends({\n              color: 'var(--Icon-color)',\n              margin: 'var(--Icon-margin)'\n            }, ownerState.fontSize && ownerState.fontSize !== 'inherit' && {\n              fontSize: \"var(--Icon-fontSize, \".concat(themeProp.vars.fontSize[ownerState.fontSize], \")\")\n            }, ownerState.color && ownerState.color !== 'inherit' && ownerState.color !== 'context' && themeProp.vars.palette[ownerState.color] && {\n              color: \"rgba(\".concat((_themeProp$vars$palet = themeProp.vars.palette[ownerState.color]) == null ? void 0 : _themeProp$vars$palet.mainChannel, \" / 1)\")\n            }, ownerState.color === 'context' && {\n              color: themeProp.vars.palette.text.secondary\n            }, instanceFontSize && instanceFontSize !== 'inherit' && {\n              '--Icon-fontSize': themeProp.vars.fontSize[instanceFontSize]\n            });\n          }\n        }\n      }\n    }, componentsInput),\n    cssVarPrefix: cssVarPrefix,\n    getCssVar: getCssVar,\n    spacing: createSpacing(spacing),\n    colorInversionConfig: {\n      soft: ['plain', 'outlined', 'soft', 'solid'],\n      solid: ['plain', 'outlined', 'soft', 'solid']\n    }\n  }); // Need type casting due to module augmentation inside the repo\n\n  /**\n   Color channels generation\n  */\n  function attachColorChannels(supportedColorScheme, palette) {\n    Object.keys(palette).forEach(function (key) {\n      var channelMapping = {\n        main: '500',\n        light: '200',\n        dark: '800'\n      };\n      if (supportedColorScheme === 'dark') {\n        // @ts-ignore internal\n        channelMapping.main = 400;\n      }\n      if (!palette[key].mainChannel && palette[key][channelMapping.main]) {\n        palette[key].mainChannel = colorChannel(palette[key][channelMapping.main]);\n      }\n      if (!palette[key].lightChannel && palette[key][channelMapping.light]) {\n        palette[key].lightChannel = colorChannel(palette[key][channelMapping.light]);\n      }\n      if (!palette[key].darkChannel && palette[key][channelMapping.dark]) {\n        palette[key].darkChannel = colorChannel(palette[key][channelMapping.dark]);\n      }\n    });\n  }\n  // Set the channels\n  Object.entries(theme.colorSchemes).forEach(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      supportedColorScheme = _ref5[0],\n      colorSystem = _ref5[1];\n    attachColorChannels(supportedColorScheme, colorSystem.palette);\n  });\n\n  // ===============================================================\n  // Create `theme.vars` that contain `var(--*)` as values\n  // ===============================================================\n  var parserConfig = {\n    prefix: cssVarPrefix,\n    shouldSkipGeneratingVar: shouldSkipGeneratingVar\n  };\n  var _prepareCssVars = prepareCssVars(\n    // @ts-ignore property truDark is missing from colorSchemes\n    _extends({\n      colorSchemes: colorSchemes\n    }, mergedScales), parserConfig),\n    themeVars = _prepareCssVars.vars,\n    generateCssVars = _prepareCssVars.generateCssVars;\n  theme.vars = themeVars;\n  theme.generateCssVars = generateCssVars;\n  theme.unstable_sxConfig = _extends({}, defaultSxConfig, themeOptions == null ? void 0 : themeOptions.unstable_sxConfig);\n  theme.unstable_sx = function sx(props) {\n    return styleFunctionSx({\n      sx: props,\n      theme: this\n    });\n  };\n  theme.getColorSchemeSelector = function (colorScheme) {\n    return colorScheme === 'light' ? '&' : \"&[data-joy-color-scheme=\\\"\".concat(colorScheme, \"\\\"], [data-joy-color-scheme=\\\"\").concat(colorScheme, \"\\\"] &\");\n  };\n  var createVariantInput = {\n    getCssVar: getCssVar,\n    palette: theme.colorSchemes.light.palette\n  };\n  theme.variants = deepmerge({\n    plain: createVariant('plain', createVariantInput),\n    plainHover: createVariant('plainHover', createVariantInput),\n    plainActive: createVariant('plainActive', createVariantInput),\n    plainDisabled: createVariant('plainDisabled', createVariantInput),\n    outlined: createVariant('outlined', createVariantInput),\n    outlinedHover: createVariant('outlinedHover', createVariantInput),\n    outlinedActive: createVariant('outlinedActive', createVariantInput),\n    outlinedDisabled: createVariant('outlinedDisabled', createVariantInput),\n    soft: createVariant('soft', createVariantInput),\n    softHover: createVariant('softHover', createVariantInput),\n    softActive: createVariant('softActive', createVariantInput),\n    softDisabled: createVariant('softDisabled', createVariantInput),\n    solid: createVariant('solid', createVariantInput),\n    solidHover: createVariant('solidHover', createVariantInput),\n    solidActive: createVariant('solidActive', createVariantInput),\n    solidDisabled: createVariant('solidDisabled', createVariantInput)\n  }, variantsInput);\n  theme.palette = _extends({}, theme.colorSchemes.light.palette, {\n    colorScheme: 'light'\n  });\n  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar;\n\n  // @ts-ignore if the colorInversion is provided as callbacks, it needs to be resolved in the CssVarsProvider\n  theme.colorInversion = typeof colorInversionInput === 'function' ? colorInversionInput : deepmerge({\n    soft: createSoftInversion(theme, true),\n    solid: createSolidInversion(theme, true)\n  }, colorInversionInput || {}, {\n    clone: false\n  });\n  return theme;\n}","map":null,"metadata":{},"sourceType":"module"}